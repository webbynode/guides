---
title:      Rapid Application Deployment Engine
created_at: 2010-01-14 00:36:35.278020 -02:00
layout:     rapid
filter:
  - erb
  - textile
---
h1. <%= h(@page.title) %>

h2. Updating

To update an already published app, you just have to follow the git workflow you're probably already used to. 

After your changes have been saved, you'll have to commit them:

<% coderay(:lang => "bash") do -%>
$ git add .
$ git commit -m "My lovely changeset"
<% end -%>

And then, again:

<% coderay(:lang => "bash") do -%>
$ webbynode push
Publishing myapp to Webbynode...
mkdir: created directory `myapp'
Counting objects: 86, done.
...
<% end -%>

And that's it. The same process will happen again.

However, we have a safety system in place. Let's say you made a lot of changes but forgot to commit them using <code>git</code>. The Webbynode gem will give you a nice warning:

<% coderay(:lang => "bash") do -%>
$ wn push
Cannot push because you have pending changes. Do a git commit or add
changes to .gitignore.
<% end -%>

At this point you should choose what to do. Use <code>git status</code> to check pending changes:

<% coderay(:lang => "bash") do -%>
$ git status
# On branch master
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working 
directory)
#
#       modified:   README
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       temp/
no changes added to commit (use "git add" and/or "git commit -a")
<% end -%>

In this case, we have two changes. I want to commit the <code>README</code> file, but not the <code>temp/</code> folder. So I just add the folder to the .gitignore file:

<% coderay(:lang => "bash") do -%>
$ echo "\ntemp/" >> .gitignore
$ git status
# On branch master
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working 
directory)
#
#       modified:   .gitignore
#       modified:   README
#
no changes added to commit (use "git add" and/or "git commit -a")
<% end -%>

And now it looks good. So do a <code>git commit</code> and we're ready to push again:

<% coderay(:lang => "bash") do -%>
$ git commit -am "Fixed README and added temp to .gitignore" 
[master 7d63ae9] Fixed README and added temp to .gitignore
 2 files changed, 4 insertions(+), 1 deletions(-)
 
$ wn push
[imac] fcoury:~/Projects/sampleapp [git:master] â†’ wn push
[Webbynode] Pushing sampleapp

(...)

----------------------------
  Webbynode git deployment 
----------------------------

Nginx+Passenger webserver detected...
Setting up DNS...

Deploying application sampleapp as sampleapp.webbyapp.com...

(...)

sampleapp deployed successfully.

Created http://sampleapp.webbyapp.com/

To git@67.23.79.32:sampleapp
   eeaa391..7d63ae9  master -> master

[Webbynode] Finished pushing sampleapp
<% end -%>

This enforcement of a clean git repo before publishing can be overridden by the <code>--dirty</code> clause, like seen on <code>push</code>'s command help:

<% coderay(:lang => "bash") do -%>
$ wn push --help
Sends pending changes on the current application to your Webby
Usage: webbynode push [options]
Options:
    --dirty             Allows pushing even if the current application
                        has git changes pending
<% end %>
    
Please note that if you force a dirty push, only changes made up to the last git commit will be pushed.

At this point you have finished the deployment lifecycle.

You can now:

* check a <a href="workflow.html">suggested workflow</a> for your deployments
* check the <a href="troubleshooting.html">troubleshooting information</a>
* learn how to <a href="deleting.html">delete a deployed app</a>

And if you're interested in more features, you can learn about:

* the <a href="engines.html">engines Rapp support</a>
* installing <a href="addons.html">add-ons</a> like MongoDB, or Beanstalkd
* how to enable <a href="backup.html">automated backups</a> for your application code and database
* <a href="webbyops.html">interact with your Webby</a>
* and how to setup <a href="hooks.html">deployment hooks</a> for your app
